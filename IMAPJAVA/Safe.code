/////////////////////
//
//
//
//
//
//
import java.util.*;
import java.io.*;
import javax.mail.*;
import javax.mail.internet.*;
import javax.mail.search.*;
import javax.activation.*;


public class TestClient
{
    static String protocol = "pop3";      

    TestClient() {


    }

    void DoAction()
    {

     try { 
     ///////////////////////////////////////////////// 
     // Get a Properties object
     //  
     System.out.println("About Start");  
     Properties props = System.getProperties();
     System.out.println("Hello World");   
     ////////////////////////////////////////////// 
     // Get a Session object	    
     //
     Session session = Session.getDefaultInstance(props, null);
     ////////////////////////////////////////////
     // Get a Store object
     //
     Store store = null;
     System.out.println("About to Set Protocol"); 
     if (protocol != null)		
	    store = session.getStore(protocol);
     else	
           store = session.getStore();
	
     System.out.println("About to Connect");   
     store.connect("192.168.101.1", "pai", "iap");
      	
      // Open the Folder
      Folder folder = store.getDefaultFolder();
           System.out.println("Go the Folder");    
     if (folder == null) {
	        System.out.println("Cant find default namespace");
	        System.exit(1);
	    }
	    folder = folder.getFolder("INBOX");
	    if (folder == null) {	                                                        System.out.println("Invalid folder");
	        System.exit(1);	    
            }
	    folder.open(Folder.READ_ONLY);
            //////////////////     
            //
            //
            System.out.println(folder.getMessageCount());
            System.out.println("folder is closed + OK ");
            Message [] msgs = folder.getMessages();
            System.out.println(msgs.length); 
            FetchProfile fp = new FetchProfile();
	    fp.add(FetchProfile.Item.ENVELOPE);
            fp.add(FetchProfile.Item.CONTENT_INFO);     
	    folder.fetch(msgs, fp); 
            for (int i = 0; i < msgs.length; i++) 
            {	
        	System.out.println("--------------------------");		                                System.out.println("MESSAGE #" + (i + 1) + ":");		                                dumpPart(msgs[i]);
	    }
            folder.close(false);
       }

       catch(Exception e)
       {

              e.printStackTrace(); 
              System.out.println("Some Pasnam");

        }

}

public static void dumpPart(Part p) throws Exception 
{
         
        Message m = null; 
	if (p instanceof Message) {
	    m = (Message)p;
	    Address[] a;
	    // FROM 
	    if ((a = m.getFrom()) != null) {
		for (int j = 0; j < a.length; j++)
		    System.out.println("FROM: " + a[j].toString());
	    }
	    // TO
	    if ((a = m.getRecipients(Message.RecipientType.TO)) != null) 
             {		
                for (int j = 0; j < a.length; j++)
		    System.out.println("TO: " + a[j].toString());
	     }	    
             // SUBJECT
	    System.out.println("SUBJECT: " + m.getSubject());
	    // DATE
	    Date d = m.getSentDate();
	   // System.out.println("SendDate: " +
           //		(d != null ? d.toLocaleString() : "UNKNOWN"));
	    // FLAGS:
	    Flags flags = m.getFlags();
	    StringBuffer sb = new StringBuffer();
	    Flags.Flag[] sf = flags.getSystemFlags(); 
            // get the system flags
	    boolean first = true;
	    for (int i = 0; i < sf.length; i++) {
		String s;
		Flags.Flag f = sf[i];
		if (f == Flags.Flag.ANSWERED)
		    s = "\\Answered";
		else if (f == Flags.Flag.DELETED)
		    s = "\\Deleted";
		else if (f == Flags.Flag.DRAFT)
		    s = "\\Draft";
		else if (f == Flags.Flag.FLAGGED)
		    s = "\\Flagged";
		else if (f == Flags.Flag.RECENT)
		    s = "\\Recent";
		else if (f == Flags.Flag.SEEN)
		    s = "\\Seen";
		else
		    continue;	// skip it
		if (first)
		    first = false;
		else
		    sb.append(' ');
		sb.append(s);
	    }
          
	    String[] uf = flags.getUserFlags(); // get the user flag strings
	    for (int i = 0; i < uf.length; i++) {
		if (first)
		    first = false;
		else
		    sb.append(' ');
		sb.append(uf[i]);
	    }
	    System.out.println("FLAGS = " + sb.toString());
              if ( m != null ) 
                 {
                    MimeMessage Mst = (MimeMessage)m;
                    InputStream is = Mst.getInputStream();
                    String OutFileName = Mst.getFileName();
                    System.out.println(OutFileName);
                    if ( OutFileName != null ) {
                	int c;
                        OutputStream rst = new FileOutputStream(new File(OutFileName));
                	while ((c = is.read()) != -1)
                 	    rst.write(c);
        
                         rst.close(); 
                      }
                }  
	}
                
 
	System.out.println("CONTENT-TYPE: " + p.getContentType()); 

        
              
 
        
      
         
        
	
	Object o = p.getContent();
	if (o instanceof String) {
	    System.out.println("This is a String");
	    System.out.println((String)o);
	} else if (o instanceof Multipart) {
      
	    System.out.println("This is a Multipart");
	    Multipart mp = (Multipart)o;
	    int count = mp.getCount();
	    for (int i = 1; i < count; i++)
             {
                System.out.println("dump the sub Part");
                System.out.println("I'M HERE TOO " + i ); 
	//	dumpPart(mp.getBodyPart(i)); 
                BodyPart Prt = (BodyPart)mp.getBodyPart(i);
                InputStream sis = Prt.getInputStream();
                String sOutFileName = Prt.getFileName();
                System.out.println("file To be dumped " +sOutFileName);
                if ( sOutFileName != null ) {
	          int c;
                  try { 
                  OutputStream srst = new FileOutputStream(new File(sOutFileName));
	           while ((c = sis.read()) != -1)
	               srst.write(c);
                       srst.close(); 
                }
                catch(Exception e)
               {

                   System.out.println("CRASH WHILE DECODING");
                   System.out.println(e);  
                   //e.printStackTrace();
               }

             } }
         
	} 
        else if (o instanceof InputStream)
         {
           System.out.println("This is just an input stream");
        
	  }
      
   
    }

        public static void main(String s[] )

        {
             System.out.println("asdddddddddddd"); 
             TestClient xts = new TestClient();
             System.out.println("Created Th  BBBBBBBBasdddddddddddd"); 
             xts.DoAction();               
             System.out.println("CCCCCCCCCasdddddddddddd"); 


         }






}